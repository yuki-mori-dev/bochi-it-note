---
import BaseLayout from "../../layouts/BaseLayout.astro";
import products from "../../../data/products.json";
const title = '要件で探す｜Bochi IT Note';
const description = 'SSO/SCIM、IP制限、データ所在、監査ログなどの要件でSaaSを絞り込み。';
---

<BaseLayout {title} {description}>
	<h1 class="text-2xl font-bold">要件で探す</h1>
	<p class="mt-2 text-sm text-gray-600">チェックした要件に対応する製品を表示します。</p>

	<div id="app" class="mt-6"></div>

	<script>
		const products = JSON.parse(`{JSON.stringify(products)}`);
		const state = {
			filters: {
				sso: false,
				scim: false,
				ipAllowlist: false,
				mfa: false,
				dataResidency: '',
				auditLog: ''
			}
		};

		function matches(p, f) {
			return (
				(!f.sso || !!p.features?.sso) &&
				(!f.scim || !!p.features?.scim) &&
				(!f.ipAllowlist || !!p.features?.ipAllowlist) &&
				(!f.mfa || !!p.features?.mfa) &&
				(!f.dataResidency || String(p.features?.dataResidency || '').toLowerCase() === f.dataResidency) &&
				(!f.auditLog || String(p.features?.auditLog || '').toLowerCase() === f.auditLog)
			);
		}

		function render() {
			const root = document.getElementById('app');
			const filtered = products.filter(p => matches(p, state.filters));
			root.innerHTML = `
				<div class="grid gap-4 sm:grid-cols-[280px,1fr]">
					<aside class="rounded-md border p-4">
						<h2 class="font-semibold">要件</h2>
						<label class="mt-2 flex items-center gap-2 text-sm">
							<input type="checkbox" data-k="sso" /> SSO
						</label>
						<label class="mt-2 flex items-center gap-2 text-sm">
							<input type="checkbox" data-k="scim" /> SCIM
						</label>
						<label class="mt-2 flex items-center gap-2 text-sm">
							<input type="checkbox" data-k="ipAllowlist" /> IP制限
						</label>
						<label class="mt-2 flex items-center gap-2 text-sm">
							<input type="checkbox" data-k="mfa" /> 二要素認証
						</label>
						<div class="mt-3">
							<label class="block text-xs text-gray-600">データ所在</label>
							<select data-k="dataResidency" class="mt-1 w-full rounded border px-2 py-1 text-sm">
								<option value="">指定なし</option>
								<option value="jp">jp</option>
								<option value="eu">eu</option>
								<option value="us">us</option>
								<option value="multiple">multiple</option>
							</select>
						</div>
						<div class="mt-3">
							<label class="block text-xs text-gray-600">監査ログ</label>
							<select data-k="auditLog" class="mt-1 w-full rounded border px-2 py-1 text-sm">
								<option value="">指定なし</option>
								<option value="basic">basic</option>
								<option value="advanced">advanced</option>
							</select>
						</div>
					</aside>
					<section>
						<p class="text-sm text-gray-600">${filtered.length} 件</p>
						<ul class="mt-3 grid gap-3 sm:grid-cols-2">
							${filtered.map(p => `
								<li class="rounded-md border p-4">
									<a class="font-semibold hover:underline" href="/products/${p.slug}">${p.name}</a>
									<p class="mt-1 text-xs text-gray-600">SSO: ${p.features.sso ? '対応' : '未対応'} / SCIM: ${p.features.scim ? '対応' : '未対応'} / IP制限: ${p.features.ipAllowlist ? '対応' : '未対応'}</p>
								</li>
							`).join('')}
						</ul>
					</section>
				</div>
			`;
			root.querySelectorAll('input[type="checkbox"], select').forEach(el => {
				el.checked = state.filters[el.dataset.k] ?? false;
				el.addEventListener('change', () => {
					state.filters[el.dataset.k] = el.type === 'checkbox' ? el.checked : (el.value || '');
					const params = new URLSearchParams();
					Object.entries(state.filters).forEach(([k,v])=>{
						if(v && v!==false) params.set(k, String(v));
					});
					const url = location.pathname + (params.toString()?`?${params.toString()}`:'');
					history.replaceState(null,'',url);
					render();
				});
			});
		}

		(function initFromUrl(){
			const params = new URLSearchParams(location.search);
			['sso','scim','ipAllowlist','mfa'].forEach(k=>{
				if(params.has(k)) state.filters[k] = (params.get(k)==='true' || params.get(k)==='1' || params.get(k)==='on');
			});
			if(params.get('dataResidency')) state.filters.dataResidency = params.get('dataResidency');
			if(params.get('auditLog')) state.filters.auditLog = params.get('auditLog');
		})();
		render();
	</script>
</BaseLayout>


